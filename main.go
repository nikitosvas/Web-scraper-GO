// Этот блок кода находится в файле main.go и является точкой входа для запуска вашего приложения.

package main

import (
	"log" // log: Стандартная библиотека Go для логирования сообщений. Мы используем её для вывода сообщений об ошибках.

	"Web-parsing/internal/scraper" // Пакет, содержащий логику для парсинга. В нём реализована функция Run, которая запускает процесс парсинга.
	"github.com/spf13/viper"       //Пакет Viper используется для работы с конфигурационными файлами. Он позволяет легко загружать и управлять конфигурацией, поддерживает различные форматы файлов (YAML, JSON и т.д.).
)

func main() { // Функция main является точкой входа для выполнения программы в Go. Всё, что находится внутри этой функции, будет выполнено при запуске программы.
	viper.SetConfigFile("config.yaml") // Устанавливаем имя конфигурационного файла без расширения. Здесь указано "config", что означает, что мы ищем файл с именем config
	viper.SetConfigType("yaml")        // Указываем тип файла конфигурации. В данном случае это YAML.
	viper.AddConfigPath(".")           // Указываем путь к директории, где искать файл конфигурации. Здесь . означает текущую директорию.

	// // viper.ReadInConfig() Читает конфигурационный файл, используя указанные ранее параметры.
	if err := viper.ReadInConfig(); err != nil { // Проверяем есть ли ошибки при чтении конфиг файла
		log.Fatal("Error reading config file, ", err) // Если произошла ошибка, логируем её и завершаем выполнение программы. log.Fatalf выводит сообщение об ошибке и завершает выполнение программы с ненулевым кодом завершения.
	}

	// Вызываем функцию Run из пакета scraper. Эта функция отвечает за основной процесс парсинга. Она использует параметры, заданные в конфигурационном файле, чтобы настроить и запустить парсер.
	scraper.Run()
}
